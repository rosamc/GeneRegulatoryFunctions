#Rosa Martinez Corral. November 2019

This is code to compute boundaries of position-steepness for GRFs. It is based on an algorithm to find boundaries (BoundaryFinder), whcih can in fact be used to compute boundaries for any function that returns a point in 2D space. It just requires a custom function that takes as argument an array of parameter values, and returns a list or array with [position, steepness]. In case of failure, it should return [None,None]. 

Examples of usage can be found in examples/2019_11_04_BoundaryFinder_examples.ipynb.

In order to speed up the search, it is convenient that the functions that compute the point in 2D space are written in C++. The code in utilsGRF/writescripts.py can be used to write the files with such C++ functions to compute position and steepness, as well as mathematica files to double check the results. C++ code is to be executed from python using pybind (install with pip install pybind11).

Examples of writing and function calling are given in examples/2019_11_10_examples_writecode_executefunctions.ipynb.


I recommend launching the boundary search on the cluster for various combinations of "meta-parameters" (the parameters of the BoundaryFinder), and then combine the results. Examples to process the results are given in examples/2019_11_11_analyseboundaries.ipynb.

Some general considerations:
    - so far type in Cpp can only be double or long double. This should be modified to allow arbitrary precision using boost, as indicated by Chris Nam.


Outline of the Boundary Finder algorithm:


1. Initialise. 
1.1 Generate initial points (10). For each of them:
1.1.1 Generate parameter set, randomly sampling from a uniform distribution on log space.
1.1.2 Find corresponding position and steepness.
1.2. Find the boundary of the points using the grid method


2. Extend boundary:
Repeat niters times or until convergence (this is defined as niters_conv iterations with no new boundary points generated):
2.1 For each point in the boundary try to generate a new point that is outside the current boundary:
	While no new point has been generated and ntr<trials (=20):
    2.1.1 Mutate parameter values (every 2 or 4 trials the mutations are slighlty different: sampling from either uniform or normal distribution, with wider or smaller range).
    2.1.2 Get normalised position and steepness.
    2.1.3 If the point lies outside the current boundary, keep it and stop. If it occupies the same grid bin in position/steepness space as the current point, keep it and stop with probability prob_replace.
            
2.2 Get new boundary.
2.3 Extend the boundary by “pulling”:
    2.3.1 Get centroid of current boundary.
    For each boundary point:
    2.3.2. Define a “target” point a distance L away from the boundary, in the direction defined by the line that joins the centroid and that point.
    2.3.3 Approach the target:
    2.3.3.1 Compute the initial euclidean distance (in position-steepness space) between the current point and the target.
    2.3.3.2 while i < niters_target and converged==False:
	a. Mutate parameter set and compute position-steepness of this new point.
	b. Compute distance between new point and target.
	c. if the new distance is smaller than the previous, replace previous parameter values by current.
	d. advance counter and assess convergence: distance < tolerance or no improvement done over 20 iterations and distance < tolerance/2.
	2.3.3.3 Check if a new boundary point has been found and, if so, keep it.

2.4. Get new boundary.
